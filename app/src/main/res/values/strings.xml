<resources>
    <string name="app_name">DesignPattern</string>
    <string name="title_activity_main2">Main2Activity</string>
    <string name="jdgc">简单工厂模式</string>
    <string name="jdgc_intr">
       \n 产品类：\n\n
       &#160;&#160; interface BMW {\n
       &#160;&#160;&#160;&#160; String product();\n
       &#160;&#160;}\n\n

       &#160;&#160; public class BMW530 implements BMW {\n
       &#160;&#160; &#160;&#160; @Override\n
       &#160;&#160; &#160;&#160; public String product() {\n
       &#160;&#160;&#160;&#160;&#160;&#160; return this.getClass().getSimpleName();\n
       &#160;&#160; &#160;&#160;&#160;&#160;&#160;&#160;}\n
       &#160;&#160;&#160;&#160;}\n\n

       &#160;&#160; public class BMW750 implements BMW {\n
       &#160;&#160; &#160;&#160; @Override\n
       &#160;&#160; &#160;&#160; public String product() {\n
       &#160;&#160;&#160;&#160;&#160;&#160; return this.getClass().getSimpleName();\n
       &#160;&#160; &#160;&#160;&#160;&#160;&#160;&#160;}\n
       &#160;&#160;&#160;&#160;}\n\n\n
        工厂类：\n\n
       &#160;&#160;   public class BMWFactory {\n
       &#160;&#160;  &#160;&#160;  public BMW product(int code) {\n
       &#160;&#160;  &#160;&#160;  &#160;&#160;  switch (code) {\n
       &#160;&#160;  &#160;&#160;  &#160;&#160;&#160;&#160; &#160;&#160;&#160;&#160;  case 530:\n
       &#160;&#160;  &#160;&#160;  &#160;&#160;&#160;&#160; &#160;&#160;  &#160;&#160;&#160;&#160; return new BMW530();\n
       &#160;&#160;  &#160;&#160;  &#160;&#160;  &#160;&#160;&#160;&#160;&#160;&#160; case 750:\n
       &#160;&#160;  &#160;&#160;  &#160;&#160;   &#160;&#160;&#160;&#160; &#160;&#160;&#160;&#160; return new BMW750();\n
       &#160;&#160;  &#160;&#160;  &#160;&#160; &#160;&#160;&#160;&#160;&#160;&#160; default:\n
       &#160;&#160;  &#160;&#160;  &#160;&#160; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; return null;\n
       &#160;&#160;  &#160;&#160;  &#160;&#160; &#160;&#160;&#160;&#160;&#160;&#160;}\n
       &#160;&#160;  &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; }\n
       &#160;&#160; &#160;&#160;&#160;&#160;}\n\n\n
         测试类：\n\n
       &#160;&#160;   public class Demo {\n
       &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;public static void main(String[] args) {  \n
       &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;BMWFactory factory = new BMWFactory();  \n
       &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;BMW bmw750 = factory.product( 750 );  \n
       &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;BMW bmw530 = factory.product( 530 );  \n
       &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}  \n
       &#160;&#160; &#160;&#160;&#160;&#160;}\n
  </string>

   <string name="gcff_intr">
       \n 产品类：\n\n
       &#160;&#160; interface BMW {\n
       &#160;&#160;&#160;&#160; String product();\n
       &#160;&#160;}\n\n

       &#160;&#160; public class BMW530 implements BMW {\n
       &#160;&#160; &#160;&#160; @Override\n
       &#160;&#160; &#160;&#160; public String product() {\n
       &#160;&#160;&#160;&#160;&#160;&#160; return this.getClass().getSimpleName();\n
       &#160;&#160; &#160;&#160;&#160;&#160;&#160;&#160;}\n
       &#160;&#160;&#160;&#160;}\n\n

       &#160;&#160; public class BMW750 implements BMW {\n
       &#160;&#160; &#160;&#160; @Override\n
       &#160;&#160; &#160;&#160; public String product() {\n
       &#160;&#160;&#160;&#160;&#160;&#160; return this.getClass().getSimpleName();\n
       &#160;&#160; &#160;&#160;&#160;&#160;&#160;&#160;}\n
       &#160;&#160;&#160;&#160;}\n\n\n
        工厂类：\n\n

       &#160;&#160;public interface FactoryBMW {\n
       &#160;&#160;&#160;&#160;&#160;&#160;BMW product();\n
       &#160;&#160;&#160;&#160;}\n\n

       &#160;&#160;   public class  FactoryBMW530 implements FactoryBMW {\n
       &#160;&#160;  &#160;&#160;  @Override\n
       &#160;&#160;  &#160;&#160;  public BMW product() {\n
       &#160;&#160;  &#160;&#160;  &#160;&#160;    return new BMW530();\n
       &#160;&#160;  &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; }\n
       &#160;&#160; &#160;&#160;&#160;&#160;}\n\n\n

       &#160;&#160;   public class  FactoryBMW750 implements FactoryBMW {\n
       &#160;&#160;  &#160;&#160;  @Override\n
       &#160;&#160;  &#160;&#160;  public BMW product() {\n
       &#160;&#160;  &#160;&#160;  &#160;&#160;    return new BMW750();\n
       &#160;&#160;  &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; }\n
       &#160;&#160; &#160;&#160;&#160;&#160;}\n\n\n

         测试类：\n\n
       &#160;&#160;   public class Demo {\n
       &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;public static void main(String[] args) {  \n
       &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;FactoryBMW530 factory530 = new FactoryBMW530();  \n
       &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;BMW bmw530 = factory530.product();  \n
       &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;FactoryBMW750 factory750 = new FactoryBMW750();  \n
       &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;BMW bmw750= factory750.product();  \n
       &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}  \n
       &#160;&#160; &#160;&#160;&#160;&#160;}\n

  </string>
   <string name="cxgc_intr">
       \n 产品类：\n\n
       &#160;&#160; public interface Engine {\n
       &#160;&#160;&#160;&#160; String showEngine();\n
       &#160;&#160;}\n\n

       &#160;&#160; public class Engine530 implements Engine {\n
       &#160;&#160; &#160;&#160; @Override\n
       &#160;&#160; &#160;&#160; public String showEngine() {\n
       &#160;&#160;&#160;&#160;&#160;&#160; return this.getClass().getSimpleName();\n
       &#160;&#160; &#160;&#160;&#160;&#160;&#160;&#160;}\n
       &#160;&#160;&#160;&#160;}\n\n

       &#160;&#160; public class Engine750 implements Engine {\n
       &#160;&#160; &#160;&#160; @Override\n
       &#160;&#160; &#160;&#160; public String showEngine() {\n
       &#160;&#160;&#160;&#160;&#160;&#160; return this.getClass().getSimpleName();\n
       &#160;&#160; &#160;&#160;&#160;&#160;&#160;&#160;}\n
       &#160;&#160;&#160;&#160;}\n\n

       &#160;&#160; public interface Tyre {\n
       &#160;&#160;&#160;&#160; String showTyre();\n
       &#160;&#160;}\n\n

       &#160;&#160; public class Tyre530 implements Tyre {\n
       &#160;&#160; &#160;&#160; @Override\n
       &#160;&#160; &#160;&#160; public String showTyre() {\n
       &#160;&#160;&#160;&#160;&#160;&#160; return this.getClass().getSimpleName();\n
       &#160;&#160; &#160;&#160;&#160;&#160;&#160;&#160;}\n
       &#160;&#160;&#160;&#160;}\n\n

       &#160;&#160; public class Tyre750 implements Tyre {\n
       &#160;&#160; &#160;&#160; @Override\n
       &#160;&#160; &#160;&#160; public String showTyre() {\n
       &#160;&#160;&#160;&#160;&#160;&#160; return this.getClass().getSimpleName();\n
       &#160;&#160; &#160;&#160;&#160;&#160;&#160;&#160;}\n
       &#160;&#160;&#160;&#160;}\n\n\n


        工厂类：\n\n

       &#160;&#160;public interface AbsBMWFactory {\n
       &#160;&#160;&#160;&#160;&#160;&#160; Engine createEngine();\n
       &#160;&#160;&#160;&#160;&#160;&#160;  Tyre createTyre();\n
       &#160;&#160;&#160;&#160;}\n\n

       &#160;&#160;   public class  BMW530Factory implements AbsBMWFactory {\n
       &#160;&#160;  &#160;&#160;  @Override\n
       &#160;&#160;  &#160;&#160;  public Engine createEngine() {\n
       &#160;&#160;  &#160;&#160;  &#160;&#160;    return new Engine530();\n
       &#160;&#160;  &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; }\n
       &#160;&#160;  &#160;&#160;  @Override\n
       &#160;&#160;  &#160;&#160;  public Tyre createTyre() {\n
       &#160;&#160;  &#160;&#160;  &#160;&#160;    return new Tyre530();\n
       &#160;&#160;  &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; }\n
       &#160;&#160; &#160;&#160;&#160;&#160;}\n\n\n

       &#160;&#160;   public class  BMW750Factory implements AbsBMWFactory {\n
       &#160;&#160;  &#160;&#160;  @Override\n
       &#160;&#160;  &#160;&#160;  public Engine createEngine() {\n
       &#160;&#160;  &#160;&#160;  &#160;&#160;    return new Engine750();\n
       &#160;&#160;  &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; }\n
       &#160;&#160;  &#160;&#160;  @Override\n
       &#160;&#160;  &#160;&#160;  public Tyre createTyre() {\n
       &#160;&#160;  &#160;&#160;  &#160;&#160;    return new Tyre750();\n
       &#160;&#160;  &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; }\n
       &#160;&#160; &#160;&#160;&#160;&#160;}\n\n\n

         测试类：\n\n
       &#160;&#160;   public class Demo {\n
       &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;public static void main(String[] args) {  \n
       &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;BMW530Factory factory530 = new BMW530Factory();  \n
       &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Engine engine530 = factory530.createEngine();  \n
       &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Tyre tyre530 = factory530.createTyre();  \n
       &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;BMW750Factory factory750 = new BMW750Factory();  \n
       &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Engine engine750 = factory750.createEngine();  \n
       &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Tyre tyre750 = factory750.createTyre();  \n
       &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}  \n
       &#160;&#160; &#160;&#160;&#160;&#160;}\n

  </string>
   <string name="singleton_intro">单例对象（Singleton）是一种常用的设计模式。在Java应用中，单例对象能保证在一个JVM中，该对象只有一个实例存在。这样的模式有几个好处：\n

1、某些类创建比较频繁，对于一些大型的对象，这是一笔很大的系统开销。\n

2、省去了new操作符，降低了系统内存的使用频率，减轻GC压力。\n

3、有些类如交易所的核心交易引擎，控制着交易流程，如果该类可以创建多个的话，系统完全乱了。（比如一个军队出现了多个司令员同时指挥，肯定会乱成一团），所以只有使用单例模式，才能保证核心交易服务器独立控制整个流程。</string>
   <string name="singletonA">
      public class SingletonA{\n
      &#160;&#160;      private static SingletonA instance = null;\n

          &#160;&#160;  private SingletonA(){\n

           &#160;&#160; }\n

            &#160;&#160;public static Singleton getInstance(){\n

            &#160;&#160;&#160;&#160;   if(instance = null){\n
             &#160;&#160;&#160;&#160;&#160;&#160;     instance = new Singleton();\n
            &#160;&#160;&#160;&#160;   }\n
            &#160;&#160;&#160;&#160;   return instance;\n
          &#160;&#160;&#160;&#160;  }\n
    &#160;&#160;  }\n\n\n\n\n
      这个类可以满足基本要求，但是，像这样毫无线程安全保护的类，如果我们把它放入多线程的环境下，肯定就会出现问题了，如何解决？
   </string>
   <string name="singletonB">
      &#160;&#160; public class SingletonB{\n
      &#160;&#160; &#160;&#160;  private static SingletonB instance = null;\n
       &#160;&#160; &#160;&#160; &#160;&#160; private SingletonB(){\n

      &#160;&#160; &#160;&#160; &#160;&#160;  }\n
      &#160;&#160; &#160;&#160; public static synchronized getInstance(){\n
      &#160;&#160; &#160;&#160; &#160;&#160;  if(instance ==null){\n
      &#160;&#160; &#160;&#160; &#160;&#160;   instance = new SingletonB();\n
      &#160;&#160; &#160;&#160; &#160;&#160; }\n
      &#160;&#160; &#160;&#160;   return instance;\n
      &#160;&#160; &#160;&#160; }\n
     &#160;&#160;  }\n\n\n\n
      但是，synchronized关键字锁住的是这个对象，这样的用法，在性能上会有所下降，因为每次调用getInstance()，都要对对象上锁，事实上，只有在第一次创建对象的时候需要加锁，之后就不需要了，所以，这个地方需要改进。
   </string>
   <string name="singletonC">
     &#160; &#160;  public class SingletonC(){\n
     &#160; &#160;&#160; &#160;    private static SingletonC instance =null;\n
         &#160; &#160;&#160; &#160;&#160; &#160;private SingletonC(){\n

         &#160; &#160;&#160; &#160;&#160; &#160;}\n
         &#160; &#160;&#160; &#160;public static SingeltonC getInstance(){\n
&#160; &#160;&#160; &#160;&#160; &#160;            if(instance == null){\n
               &#160; &#160;&#160; &#160;&#160; &#160;&#160; &#160;synchronized(instance){\n
                  &#160; &#160;&#160; &#160;&#160; &#160;&#160; &#160;&#160; &#160;if(instance == null){\n
                        &#160; &#160;&#160; &#160;&#160; &#160;&#160; &#160;&#160; &#160;&#160; &#160;instance = new SingletonC();\n
                     &#160; &#160;&#160; &#160;&#160; &#160;&#160; &#160;&#160; &#160;}\n
               &#160; &#160;&#160; &#160;&#160; &#160;&#160; &#160;}\n
            &#160; &#160;&#160; &#160;&#160; &#160;}\n
            &#160; &#160;&#160; &#160;&#160; &#160;return instance;\n
         &#160; &#160;&#160; &#160;}\n
      &#160; &#160;}\n\n\n
       似乎解决了之前提到的问题，将synchronized关键字加在了内部，也就是说当调用的时候是不需要加锁的，只有在instance为null，并创建对象的时候才需要加锁，性能有一定的提升。但是，这样的情况，还是有可能有问题的，看下面的情况：在Java指令中创建对象和赋值操作是分开进行的，也就是说instance = new Singleton();语句是分两步执行的。但是JVM并不保证这两个操作的先后顺序，也就是说有可能JVM会为新的Singleton实例分配空间，然后直接赋值给instance成员，然后再去初始化这个Singleton实例。这样就可能出错了，我们以A、B两个线程为例：\n

a>A、B线程同时进入了第一个if判断\n

b>A首先进入synchronized块，由于instance为null，所以它执行instance = new Singleton();\n

c>由于JVM内部的优化机制，JVM先画出了一些分配给Singleton实例的空白内存，并赋值给instance成员（注意此时JVM没有开始初始化这个实例），然后A离开了synchronized块。\n

d>B进入synchronized块，由于instance此时不是null，因此它马上离开了synchronized块并将结果返回给调用该方法的程序。\n

e>此时B线程打算使用Singleton实例，却发现它没有被初始化，于是错误发生了。\n

所以程序还是有可能发生错误，其实程序在运行过程是很复杂的，从这点我们就可以看出，尤其是在写多线程环境下的程序更有难度，有挑战性\n\n
   </string>
   <string name="singletonD">
        &#160;&#160;public class SingletonD{\n
         &#160;&#160;&#160;&#160;   private SingletonD(){\n

            &#160;&#160;&#160;&#160;}\n
            &#160;&#160;&#160;&#160;private static class SingletonDFactory{\n
              &#160;&#160;&#160;&#160;&#160;  private static SingletonD instance = new SingletonD();\n
           &#160;&#160;&#160;&#160; }\n
          &#160;&#160;&#160;&#160;  public static SIngeltonD getInstance(){\n
               &#160;&#160;&#160;&#160;&#160;     return SingeltonDFactory.instance;\n
            &#160;&#160;&#160;&#160; }\n
     &#160;&#160;   }\n\n\n
        单例模式使用内部类来维护单例的实现，JVM内部的机制能够保证当一个类被加载的时候，这个类的加载过程是线程互斥的。这样当我们第一次调用getInstance的时候，JVM能够帮我们保证instance只被创建一次，并且会保证把赋值给instance的内存初始化完毕，这样我们就不用担心上面的问题。同时该方法也只会在第一次调用的时候使用互斥机制，这样就解决了低性能问题。\n
        由于静态内部类只会被加载一次，故该实现方式是线程安全的！
    </string>
   <string name="singletonE">
     &#160;&#160;   public class SingletonE{\n
        &#160;&#160;&#160;&#160;    private SingletonE instance = null;\n
         &#160;&#160;&#160;&#160;   private SingletonE(){\n
         &#160;&#160;&#160;&#160;   }\n
          &#160;&#160;&#160;&#160;  private synchronized static void syncInit(){\n
              &#160;&#160;&#160;&#160;&#160;&#160;  if(instance==null){\n
                  &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; instance =  new SingletonE();\n
              &#160;&#160;&#160;&#160;&#160;&#160;  }\n
          &#160;&#160;&#160;&#160;  }\n
           &#160;&#160;&#160;&#160; public static SingletonE getInstance(){\n
              &#160;&#160;&#160;&#160;&#160;&#160;  if(instance == null){\n
               &#160;&#160;&#160;&#160;&#160;&#160;  syncInit();\n
               &#160;&#160;&#160;&#160;&#160;&#160; }\n
           &#160;&#160;&#160;&#160; }\n
        &#160;&#160;}\n\n\n\n
        只需要在创建类的时候进行同步，所以只要将创建和getInstance()分开，单独为创建加synchronized关键字，也是可以的.\n
        考虑性能的话，整个程序只需创建一次实例，所以性能也不会有什么影响。
    </string>
    <string name="principle">
        总体来说设计模式分为三大类：\n\n

创建型模式，共五种：工厂方法模式、抽象工厂模式、单例模式、建造者模式、原型模式。\n\n

结构型模式，共七种：适配器模式、装饰器模式、代理模式、外观模式、桥接模式、组合模式、享元模式。\n\n

行为型模式，共十一种：策略模式、模板方法模式、观察者模式、迭代子模式、责任链模式、命令模式、备忘录模式、状态模式、访问者模式、中介者模式、解释器模式。\n\n

其实还有两类：并发型模式和线程池模式。\n\n\n\n

        设计模式的六大原则\n\n

1、开闭原则（Open Close Principle）\n

开闭原则就是说对扩展开放，对修改关闭。在程序需要进行拓展的时候，不能去修改原有的代码，实现一个热插拔的效果。所以一句话概括就是：为了使程序的扩展性好，易于维护和升级。想要达到这样的效果，我们需要使用接口和抽象类，后面的具体设计中我们会提到这点。\n\n

2、里氏代换原则（Liskov Substitution Principle）\n

里氏代换原则(Liskov Substitution Principle LSP)面向对象设计的基本原则之一。 里氏代换原则中说，任何基类可以出现的地方，子类一定可以出现。 LSP是继承复用的基石，只有当衍生类可以替换掉基类，软件单位的功能不受到影响时，基类才能真正被复用，而衍生类也能够在基类的基础上增加新的行为。里氏代换原则是对“开-闭”原则的补充。实现“开-闭”原则的关键步骤就是抽象化。而基类与子类的继承关系就是抽象化的具体实现，所以里氏代换原则是对实现抽象化的具体步骤的规范。\n\n

3、依赖倒转原则（Dependence Inversion Principle）\n

这个是开闭原则的基础，具体内容：真对接口编程，依赖于抽象而不依赖于具体。\n\n

4、接口隔离原则（Interface Segregation Principle）\n

这个原则的意思是：使用多个隔离的接口，比使用单个接口要好。还是一个降低类之间的耦合度的意思，从这儿我们看出，其实设计模式就是一个软件的设计思想，从大型软件架构出发，为了升级和维护方便。所以上文中多次出现：降低依赖，降低耦合。\n\n

5、迪米特法则（最少知道原则）（Demeter Principle）\n

为什么叫最少知道原则，就是说：一个实体应当尽量少的与其他实体之间发生相互作用，使得系统功能模块相对独立。\n\n

6、合成复用原则（Composite Reuse Principle）\n

原则是尽量使用合成/聚合的方式，而不是使用继承。\n\n
    </string>
</resources>
